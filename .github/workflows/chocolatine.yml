name: CHOCOLATINE - Epitech Project Workflow

on:
  push:
    branches-ignore:
      - 'ga-ignore**'
  pull_request:
    branches-ignore:
      - 'ga-ignore**'

env:
  MIRROR_URL: ${{ secrets.MIRROR_URL }}
  EXECUTABLES: ${{ secrets.EXECUTABLES }}

jobs:
  check_coding_style:
    name: Check Coding Style
    if: github.repository != env.MIRROR_URL
    runs-on: ubuntu-latest
    container: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run coding style checker
        run: |
          check.sh $(pwd) $(pwd)
          if [ -f coding-style-reports.log ]; then
            while read -r line; do
              file=$(echo "$line" | cut -d':' -f1)
              line_num=$(echo "$line" | cut -d':' -f2)
              message=$(echo "$line" | cut -d':' -f3-)
              echo "::error file=$file,line=$line_num::$message"
            done < coding-style-reports.log
            exit 1
          fi

  check_program_compilation:
    name: Check Program Compilation
    needs: check_coding_style
    if: github.repository != env.MIRROR_URL
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Compile project
        run: make
        timeout-minutes: 2
      
      - name: Check executables
        run: |
          IFS=',' read -ra EXEC_ARRAY <<< "$EXECUTABLES"
          for exec in "${EXEC_ARRAY[@]}"; do
            if [ ! -f "$exec" ]; then
              echo "::error file=$exec::Executable not found"
              exit 1
            fi
            if [ ! -x "$exec" ]; then
              echo "::error file=$exec::File is not executable"
              exit 1
            fi
          done
      
      - name: Clean project
        run: make clean

  run_tests:
    name: Run Tests
    needs: check_program_compilation
    if: github.repository != env.MIRROR_URL
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Run tests
        run: make tests_run
        timeout-minutes: 2

  push_to_mirror:
    name: Push to Mirror Repository
    needs: run_tests
    if: github.event_name == 'push' && github.repository != env.MIRROR_URL
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Mirror repository
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target-repo-url: ${{ env.MIRROR_URL }}
          ssh-private-key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
