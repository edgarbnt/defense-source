name: Chocolatine

env:
  MIRROR_URL: ${{secrets.MIRROR_URL}}
  EXECUTABLES: ${{secrets.EXECUTABLES}}
on:
  push:
    branches-ignore:
      - 'ga-ignore-**'
  pull_request:
    branches-ignore:
      - 'ga-ignore-**'

jobs:
  check_coding_style:
    runs-on: ubuntu-latest
    container: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run coding style checker
        run: |
          check.sh $(pwd) $(pwd)
        
      - name: Display coding style errors
        if: always()
        run: |
          if [ -s coding-style-reports.log ]; then
            while IFS= read -r line; do
              file=$(echo "$line" | cut -d: -f1)
              line_no=$(echo "$line" | cut -d: -f2)
              error=$(echo "$line" | cut -d: -f3-)
              echo "::error file=$file,line=$line_no::$error"
            done < coding-style-reports.log
            exit 1
          fi

  check_program_compilation:
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker
    needs: check_coding_style
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compile the project
        run: make
        timeout-minutes: 2

      - name: Clean the project
        run: make clean

      - name: Verify executables
        run: |
          IFS=',' read -r EXEC_ARRAY << "$EXECUTABLES"
          for executable in "${EXEC_ARRAY[@]}"; do
            if [ ! -f "$executable" ]; then
              echo "::error file=$executable::Executable '$executable' not found"
              exit 1
            elif [ ! -x "$executable" ]; then
              echo "::error file=$executable::File '$executable' is not executable"
              exit 1
            fi
          done

  run_tests:
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker
    needs: check_program_compilation
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run tests
        run: make tests_run
        timeout-minutes: 2

  push_to_mirror:
    runs-on: ubuntu-latest
    needs: run_tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Push to mirror
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url:
            ${{env.MIRROR_URL}}
          ssh_private_key:
            ${{secrets.SECRET_KEY}}
