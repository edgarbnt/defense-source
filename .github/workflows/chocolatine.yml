on:
    push:
      branches-ignore:
        - ga-ignore-*
    pull_request:
      branches-ignore:
        - ga-ignore-*
  env:
    MIRROR_REPO:
    MIRROR_URL:
    EXECUTABLES:

  jobs:
      check_repository:
        runs-on: ubuntu-latest
        steps:
          - name: Check if the current repository is the same as the target one
            run: |
                if [[ "$GITHUB_REPOSITORY" == $MIRROR_REPO ]]; then
                  exit 1
                fi

      check_coding_style:
          runs-on: ubuntu-latest
          needs: check_repository
          container:
            image: ghcr.io/epitech/coding-style-checker:latest
          steps:
              - name: Checkout repository
                uses: actions/checkout@v4
                with:
                  fetch-depth: 0

              - name: Run coding style checker
                run: check.sh $(pwd) $(pwd)

              - name: Check if coding-style-reports.log exists
                run: |
                  if [ ! -f "coding-style-reports.log" ]; then
                    exit 1
                  fi

              - name: Convert coding-style-reports.log in some git annotations
                run: |
                  if [ -s coding-style-reports.log ]; then
                    grep ":" coding-style-reports.log | while IFS= read -r line; do
                        FILE=$(echo "$line" | awk -F':' '{print $1}' | sed 's|./||')
                        LINE=$(echo "$line" | awk -F':' '{print $2}')
                        TYPE=$(echo "$line" | awk -F':' '{print $3}' | cut -d'-' -f1)
                        CODE=$(echo "$line" | awk -F':' '{print $4}')
                        echo "::error file=$FILE,line=$LINE,title=$TYPE coding style error::$CODE"
                    done
                    exit 1
                  fi


      check_program_compilation:
          runs-on: ubuntu-latest
          needs: check_coding_style
          container:
            image: epitechcontent/epitest-docker:latest
          steps:
              - name: Checkout repository
                uses: actions/checkout@v4
                with:
                  fetch-depth: 0

              - name: Run compilation
                run: make timeout=120

              - name: Clear repository
                run: make clean

              - name: Check if all executables are executable
                run: |
                    echo "$EXECUTABLES" | tr ',' '\n' | while read -r executable; do
                      if [ ! -x "$executable" ]; then
                        echo "Error: $executable is not executable or does not exist."
                        exit 1
                      fi
                      echo "$executable ok"
                    done


      run_tests:
          runs-on: ubuntu-latest
          needs: check_program_compilation
          container:
            image: epitechcontent/epitest-docker:latest
          steps:
              - name: Checkout repository
                uses: actions/checkout@v4
                with:
                  fetch-depth: 0

              - name: Run tests in Docker
                run: make tests_run timeout=120


      push_to_mirror:
          runs-on: ubuntu-latest
          needs: run_tests
          if: github.event_name == 'push'
          steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                fetch-depth: 0

            - name: Clone repository
              uses: pixta-dev/repository-mirroring-action@v1
              with:
                target_repo_url: ${{ env.MIRROR_URL }}
                ssh_private_key: ${{ secrets.MIRROR_SSH_PRIVATE_KEY }}
