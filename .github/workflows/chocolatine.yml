name: chocolatine

on:
  push:
    branches-ignore:
      - 'ga-ignore-*'
  pull_request:
    branches-ignore:
      - 'ga-ignore-*'

env:
  MIRROR_URL: "git@github.com:edgarbnt/defense-mirror.git"
  EXECUTABLES: "my_nm"
  LIBRARIES: ""

jobs:
  check_repository_cleanliness:
    name: Check repository cleanliness
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
      - name: Check for unwanted files
        run: |
          UNWANTED_FILES=$(find . -type f \( -name "*.o" -o -name "*.a" -o -name "*.gc*" -o -name "*.so" -o -name "*~" -o -name "#*#" \))
          if [ ! -z "$UNWANTED_FILES" ]; then
            echo "::error::Unwanted files detected:"
            echo "$UNWANTED_FILES"
            exit 84
          fi
          echo "Repository is clean"
      - name: Check executables
        run: |
          EXECUTABLES=$(find . -type f -perm -u+x -not -path "./.git/*")
          if [ -n "$EXECUTABLES" ]; then
            echo "Found executables:"
            echo "$EXECUTABLES"
            for executable in $EXECUTABLES; do
              if [ -x "$executable" ]; then
                echo "Checking $executable"
                if ! [ -f "$executable" ]; then
                  echo "::error::$executable is not a regular file"
                  exit 84
                fi
              fi
            done
          else
            echo "No executables found"
          fi
      

  check_coding_style:
    name: Check coding style
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/epitech/coding-style-checker:latest
    needs: check_repository_cleanliness
    steps:
      - uses: actions/checkout@v4.2.2
      - name: Check coding style
        run: |
          check.sh $(pwd) $(pwd)
          if [ -s coding-style-reports.log ]; then
            while IFS= read -r line; do
              file_path=$(echo "$line" | cut -d: -f1)
              line_number=$(echo "$line" | cut -d: -f2)
              error_type=$(echo "$line" | cut -d: -f3)
              error_msg=$(echo "$line" | cut -d: -f4-)
              echo "::error file=${file_path},line=${line_number}::MAJOR coding style error: ${file_path}:${line_number}"
            done < coding-style-reports.log
            cat coding-style-reports.log
            exit 84
          fi

  check_program_compilation:
    name: Check program compilation
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker
    needs: check_coding_style
    steps:
      - uses: actions/checkout@v4.2.2
      - name: Compile program
        timeout-minutes: 2
        run: |
          make
      - name: Clean compilation
        run: |
          make clean
      - name: Check executables
        run: |
            for executable in $EXECUTABLES; do
              if [ ! -f "$executable" ]; then
                echo "::error::Executable '$executable' not found"
                exit 84
              fi
              if [ ! -x "$executable" ]; then
                echo "::error::File '$executable' exists but is not executable"
                exit 84
              fi
              echo "Executable '$executable' found and is executable"
            done

  run_tests:
    name: Run tests
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker
    needs: check_program_compilation
    steps:
      - uses: actions/checkout@v4.2.2
      - name: Run tests
        timeout-minutes: 2
        run: |
          make tests_run

  push_to_mirror:
    name: Push to mirror
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: run_tests
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
      - name: Push to mirror
        uses: pixta-dev/repository-mirroring-action@v1.1.1
        with:
          target_repo_url: ${{ env.MIRROR_URL }}
          ssh_private_key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}

  check_libraries:
    name: Check libraries
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Check libraries
        run: |
          LIBRARIES=$(find . -type f -name "*.a" -o -name "*.so" -not -path "./.git/*")
          if [ -n "$LIBRARIES" ]; then
            echo "Found libraries:"
            echo "$LIBRARIES"
            for library in $LIBRARIES; do
              if [ -f "$library" ]; then
                echo "Checking $library"
                if ! [ -f "$library" ]; then
                  echo "::error::$library is not a regular file"
                  exit 84
                fi
              fi
            done
          else
            echo "No libraries found"
          fi