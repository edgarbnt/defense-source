name: Chocolatine Auto Checker

on:
  push:
    branches-ignore:
      - 'ga-ignore-*'
  pull_request:
    branches-ignore:
      - 'ga-ignore-*'

env:
  MIRROR_URL: ${{ secrets.MIRROR_URL }}
  EXECUTABLES:

jobs:
  coding-style:
    name: "Check Coding Style"
    runs-on: ubuntu-latest
    container: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify coding style
        run: |
          check.sh $(pwd) $(pwd)
          [ ! -s coding-style-reports.log ] || {
            while IFS=: read -r file line error; do
              echo "::error file=$file,line=$line::$error"
            done < coding-style-reports.log
            exit 1
          }

  compilation:
    name: "Check Compilation"
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker
    needs: coding-style
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Building project
        run: make
        timeout-minutes: 2

      - name: Cleaning build files
        run: make clean

      - name: Validating executables presence
        run: |
          IFS=',' read -ra EXECS <<< "${EXECUTABLES}"
          ERROR=0
          for EXE in "${EXECS[@]}"; do
            [ -x "$EXE" ] || {
              echo "::error file=$EXE::Executable '$EXE' missing or not executable."
              ERROR=1
            }
          done
          exit $ERROR

  tests-unit:
    name: "Run Unit Tests"
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker
    needs: compilation
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Running tests suite
        run: make tests_run
        timeout-minutes: 2

  repo-mirroring:
    name: "Mirror Repository"
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: tests-unit
    steps:
      - name: Repository mirroring to Epitech
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{ env.MIRROR_URL }}
          ssh_private_key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
